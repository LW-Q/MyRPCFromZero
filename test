package com.ca.excel.test;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;
import java.util.Base64;
public class TextEncryption {

    public static final String ALGORITHM = "AES";
    public static final String TRANSFORMATION = "AES/CBC/PKCS5Padding"; // 加密模式/填充方式
    public static final String KEY = "IzuU/rbp+RQ4qpvMlPRhKA==";
    public static byte[] iv = {77, 100, 123, -99, -75, -7, 104, 64, 85, -68, -50, -14, -39, -2, -89, 100};
    public static byte[] keyBytes = KEY.getBytes();
    public static IvParameterSpec ivParams = new IvParameterSpec(iv);

    public static void main(String[] args) throws Exception {


        // 加密过程
        String originalText = "这是一段需要加密的文本，它可以非常长。";
        System.out.println("原文：" + originalText);
        byte[] encrypted = encrypt(originalText.getBytes());
        System.out.println(Arrays.toString(encrypted));
        String str = Base64.getEncoder().encodeToString(encrypted);
        System.out.println("加密后的文本：" + str);
        System.out.println("加密后的文本：" + Arrays.toString(Base64.getDecoder().decode(str)));
        byte[] decode = Base64.getDecoder().decode(str);
        // 解密过程
        byte[] decrypted = decrypt(decode);
        System.out.println("解密后的文本：" + new String(decrypted));
    }

    public static byte[] encrypt(byte[] data) throws Exception {
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivParams);
        return cipher.doFinal(data);
    }

    public static byte[] decrypt(byte[] encrypted) throws Exception {
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivParams);
        return cipher.doFinal(encrypted);
    }
}
